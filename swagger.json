{
  "swagger": "2.0",
  "info": {
    "description": "Full documentation about Player RESTful API including methods, enpoint, etc. You can find out which endpoint to use and what the methods do, and how it works.",
    "version": "1.0.0",
    "title": "Players API"
  },
  "host": "localhost:4000",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "players",
      "description": "Operations about player"
    }
  ],
  "schemes": ["http"],
  "paths": {
    "/players": {
      "post": {
        "tags": ["players"],
        "summary": "Create player",
        "description": "You can create player and required to use unique username or error",
        "operationId": "createPlayers",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Create players object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreatePlayers"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Create players successfully",
            "schema": {
              "$ref": "#/definitions/Players"
            }
          },
          "400": {
            "description": "Failed, username,email, and password cannot empty"
          }
        }
      },
      "get": {
        "tags": ["players"],
        "summary": "get all players",
        "description": "get all players created",
        "operationId": "getPlayers",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "players found successfully",
            "schema": {
              "$ref": "#/definitions/Players"
            }
          }
        }
      }
    },
    "/players/{playersId}": {
      "get": {
        "tags": ["players"],
        "summary": "Find players by ID",
        "description": "Returns a single players",
        "operationId": "getPlayersById",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "playersId",
            "in": "path",
            "description": "ID of players to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Success get players by ID",
            "schema": {
              "$ref": "#/definitions/Players"
            }
          },
          "404": {
            "description": "Players not found"
          }
        }
      },
      "put": {
        "tags": ["players"],
        "summary": "Update players by ID",
        "description": "Update a single players",
        "operationId": "updatePlayersById",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "playersId",
            "in": "path",
            "description": "ID of players to be updated",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "update players data with a new one",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreatePlayers"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update players by ID success"
          },
          "500": {
            "description": "Failed to update players with the current ID"
          }
        }
      },
      "delete": {
        "tags": ["players"],
        "summary": "Deletes a players",
        "description": "delete a single players from database",
        "operationId": "deletePlayersById",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "playersId",
            "in": "path",
            "description": "Players id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete players with the current id success"
          },
          "400": {
            "description": "Failed to delete players with the current id or players not found"
          }
        }
      }
    },
    "/players/exp/{playersId}": {
      "post": {
        "tags": ["players"],
        "summary": "Update players experience",
        "description": "Replace players current experience with a new one",
        "operationId": "updateExperienceById",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "playersId",
            "in": "path",
            "description": "Players ID to update experience",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "update players experience",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePlayersExperience"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update players with the current ID success"
          },
          "400": {
            "description": "Failed to update players experience"
          }
        }
      }
    }
  },
  "definitions": {
    "CreatePlayers": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "experience": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Players": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "experience": {
          "type": "integer",
          "format": "int64"
        },
        "lvl": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "UpdatePlayersExperience": {
      "type": "object",
      "properties": {
        "exp": {
          "type": "integer",
          "format": "int64"
        }
      }
    }
  }
}
